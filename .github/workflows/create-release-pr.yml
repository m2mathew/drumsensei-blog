name: "0) Start Release - minor version"

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version and bump minor
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump minor version using npm
          npm version minor --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")

          echo "New version: $NEW_VERSION"
          echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=release/$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Delete existing release branch if it exists
        run: |
          if git ls-remote --exit-code origin "refs/heads/${{ steps.version.outputs.BRANCH_NAME }}"; then
            echo "Branch ${{ steps.version.outputs.BRANCH_NAME }} already exists on remote. Deleting it..."
            git push origin :"${{ steps.version.outputs.BRANCH_NAME }}"
          fi

      - name: Create release branch
        run: |
          git checkout -b ${{ steps.version.outputs.BRANCH_NAME }}

      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "chore: update to version ${{ steps.version.outputs.RELEASE_VERSION }}"

      - name: Push release branch
        run: |
          git push origin ${{ steps.version.outputs.BRANCH_NAME }}

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            // Get the latest release to find when it was created
            let lastReleaseDate = null;
            try {
              const { data: latestRelease } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              lastReleaseDate = new Date(latestRelease.published_at || latestRelease.created_at);
              console.log(`Last release date: ${lastReleaseDate}`);
            } catch (error) {
              console.log('No previous release found, will include all merged PRs');
              // Set to a very old date to include all PRs if no previous release
              lastReleaseDate = new Date('2021-01-01');
            }

            // Get all merged PRs
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });

            console.log(`Found ${pullRequests.length} closed PRs`);

            // Filter for merged PRs since last release
            const mergedPRs = pullRequests.filter(pr => {
              if (!pr.merged_at) return false;
              const mergedDate = new Date(pr.merged_at);
              const isAfterLastRelease = mergedDate > lastReleaseDate;
              console.log(`PR #${pr.number}: merged ${mergedDate}, after last release: ${isAfterLastRelease}`);
              return isAfterLastRelease;
            });

            console.log(`Found ${mergedPRs.length} merged PRs since last release`);

            // Format PR list
            let prList = '';
            if (mergedPRs.length > 0) {
              prList = mergedPRs
                .sort((a, b) => new Date(a.merged_at) - new Date(b.merged_at)) // Sort by merged_at ascending
                .map(pr => `#${pr.number} â€” ${pr.title}`)
                .join('\n');
            } else {
              prList = 'No merged pull requests found since last release.';
            }

            console.log(`PR List:\n${prList}`);

            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '${{ steps.version.outputs.RELEASE_VERSION }} Release',
              head: '${{ steps.version.outputs.BRANCH_NAME }}',
              base: 'main',
              body: `## Release ${{ steps.version.outputs.RELEASE_VERSION }}

              - Bump version to ${{ steps.version.outputs.RELEASE_VERSION }}

              ### Updates since last release

              Test the following changes once the staging deployment is ready:

              ${prList}`,
            });

            // Add release label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: ['release']
            });

            console.log(`Created PR #${pullRequest.number}: ${pullRequest.html_url}`);

            // Set output for next step
            return { pullRequestNumber: pullRequest.number };

      - name: Enable Pull Request Automerge
        run: gh pr merge --merge --auto "${{ fromJson(steps.create-pr.outputs.result).pullRequestNumber }}"
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
