name: "0) Start Release - minor version"

on:
  workflow_dispatch:

jobs:
  update-version-and-open-pull-request-:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version and bump minor
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump minor version using npm
          npm version minor --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")

          echo "New version: $NEW_VERSION"
          echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=release/$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git checkout -b ${{ steps.version.outputs.BRANCH_NAME }}

      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.RELEASE_VERSION }}"

      - name: Push release branch
        run: |
          git push origin ${{ steps.version.outputs.BRANCH_NAME }}

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            // Get the latest release to find the commit SHA
            let lastReleaseCommit = null;
            try {
              const { data: latestRelease } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              lastReleaseCommit = latestRelease.target_commitish;
            } catch (error) {
              console.log('No previous release found, using repository creation as baseline');
            }

            // Get all merged PRs since the last release
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });

            // Filter for merged PRs since last release
            let mergedPRs = pullRequests.filter(pr => pr.merged_at);

            if (lastReleaseCommit) {
              // Get commits since last release
              const { data: commits } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: lastReleaseCommit,
                head: 'main'
              });

              const commitSHAs = new Set(commits.commits.map(commit => commit.sha));

              // Filter PRs to only include those with merge commits in our range
              mergedPRs = mergedPRs.filter(pr =>
                pr.merge_commit_sha && commitSHAs.has(pr.merge_commit_sha)
              );
            }

            // Format PR list
            let prList = '';
            if (mergedPRs.length > 0) {
              prList = mergedPRs
                .map(pr => `#${pr.number} â€” ${pr.title}`)
                .join('\n');
            } else {
              prList = 'No merged pull requests found since last release.';
            }

            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '${{ steps.version.outputs.RELEASE_VERSION }} Release',
              head: '${{ steps.version.outputs.BRANCH_NAME }}',
              base: 'main',
              body: `## Release ${{ steps.version.outputs.RELEASE_VERSION }}

              This PR contains the version bump for release ${{ steps.version.outputs.RELEASE_VERSION }}.

              ### Changes
              - Bumped version to ${{ steps.version.outputs.RELEASE_VERSION }}

              ### Merged Pull Requests
              ${prList}

              Please review and merge when ready to release.`,
            });

            // Add release label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pullRequest.number,
              labels: ['release']
            });

            console.log(`Created PR #${pullRequest.number}: ${pullRequest.html_url}`);
